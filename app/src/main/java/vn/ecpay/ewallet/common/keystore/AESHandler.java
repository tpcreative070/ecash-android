package vn.ecpay.ewallet.common.keystore;

import android.util.Base64;
import android.util.Log;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.spec.KeySpec;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

/**
 *
 */
public class AESHandler {

    private static final String TAG = AESHandler.class.getName();
    private static AESHandler mInstance = null;
    private static byte[] KEY;

    /**
     * Your IV Initialization Vector
     */
    private final static byte[] ivx = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    private byte[] mSalt;
    private IvParameterSpec mIv;

    private AESHandler() {
        SecureRandom secureRandom = new SecureRandom();
        mSalt = new byte[32];
        secureRandom.nextBytes(mSalt);
        mIv = new IvParameterSpec(ivx);
    }

    /**
     * singleton of class AESHandler.
     *
     * @return object singleton.
     */
    public static AESHandler createInstance() {
        if (mInstance == null) {
            mInstance = new AESHandler();
        }
        return mInstance;
    }

    /**
     * encrypt a private key generated by RSA algorithm.
     *
     * @param privateKey a private key of key pairs.
     * @param password   password input by user.
     * @return a private key hashed with format base 64.
     */
    public String encryptPrivateKey(byte[] privateKey, String password) {
        try {
//            byte[] srcBuff = privateKey.getEncoded();
            SecretKey key = initKeySpec(password);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
            cipher.init(Cipher.ENCRYPT_MODE, key, mIv);
            byte[] dstBuff = cipher.doFinal(privateKey);
            return Base64.encodeToString(dstBuff, Base64.DEFAULT);
        } catch (Exception e) {
            e.printStackTrace();
            Log.d(TAG, e.getMessage());
        }
        return null;
    }

    private SecretKey initKeySpec(String password) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            byte[] hashedPassword = messageDigest.digest(password.getBytes(StandardCharsets.UTF_8));
            SecretKeySpec secret = new SecretKeySpec(hashedPassword, "AES");
            return secret;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public SecretKey initKeySpec() {
        try {
            KeySpec keySpec = new PBEKeySpec("123".toCharArray(), mSalt, 65536, 256);
            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            return secretKeyFactory.generateSecret(keySpec);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * decrypt a private key generated by RSA algorithm.
     *
     * @param encryptedPriKey a private hashed.
     * @param password        password input by user.
     * @return a decrypted of private key hashed with format base 64.
     */
    public String decryptPrivateKey(String encryptedPriKey, String password) {
        try {
            SecretKey key = initKeySpec(password);
            Cipher eCipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
            eCipher.init(Cipher.DECRYPT_MODE, key, mIv);
            byte[] raw = Base64.decode(encryptedPriKey, Base64.DEFAULT);
            byte[] originalBytes = eCipher.doFinal(raw);
            return Base64.encodeToString(originalBytes, Base64.DEFAULT);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public String encryptString(String textEncrypt, SecretKey key) {
        try {
//            String password = "123";
//            SecretKey key = initKeySpec(password);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
            cipher.init(Cipher.ENCRYPT_MODE, key, mIv);
            byte[] dstBuff = cipher.doFinal(textEncrypt.getBytes());
            return Base64.encodeToString(dstBuff, Base64.DEFAULT);
        } catch (Exception e) {
            e.printStackTrace();
            Log.d(TAG, e.getMessage());
        }
        return null;
    }

    public String decryptString(String encrypted, SecretKey key) {
        try {
            Cipher eCipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
            eCipher.init(Cipher.DECRYPT_MODE, key, mIv);
            byte[] raw = Base64.decode(encrypted, Base64.DEFAULT);
            byte[] originalBytes = eCipher.doFinal(raw);
            return Base64.encodeToString(originalBytes, Base64.DEFAULT);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


}
